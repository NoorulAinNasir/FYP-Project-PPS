[{"C:\\Users\\QURAT UL AIN NASIR\\Desktop\\pps-project\\src\\index.js":"1","C:\\Users\\QURAT UL AIN NASIR\\Desktop\\pps-project\\src\\App.js":"2","C:\\Users\\QURAT UL AIN NASIR\\Desktop\\pps-project\\src\\reportWebVitals.js":"3","C:\\Users\\QURAT UL AIN NASIR\\Desktop\\pps-project\\src\\Auth.js":"4","C:\\Users\\QURAT UL AIN NASIR\\Desktop\\pps-project\\src\\users\\admin\\Admin.js":"5","C:\\Users\\QURAT UL AIN NASIR\\Desktop\\pps-project\\src\\spellBee\\speechTotext\\SpeechToText.js":"6","C:\\Users\\QURAT UL AIN NASIR\\Desktop\\pps-project\\src\\spellBee\\SpellLevel.js":"7","C:\\Users\\QURAT UL AIN NASIR\\Desktop\\pps-project\\src\\users\\admin\\AddWordAdmin.js":"8","C:\\Users\\QURAT UL AIN NASIR\\Desktop\\pps-project\\src\\users\\student\\Student.js":"9","C:\\Users\\QURAT UL AIN NASIR\\Desktop\\pps-project\\src\\spellBee\\MainPage.js":"10","C:\\Users\\QURAT UL AIN NASIR\\Desktop\\pps-project\\src\\users\\teacher\\Teacher.js":"11","C:\\Users\\QURAT UL AIN NASIR\\Desktop\\pps-project\\src\\modal.js":"12","C:\\Users\\QURAT UL AIN NASIR\\Desktop\\pps-project\\src\\ErrorModal.js":"13","C:\\Users\\QURAT UL AIN NASIR\\Desktop\\pps-project\\src\\utils\\useForm.js":"14","C:\\Users\\QURAT UL AIN NASIR\\Desktop\\pps-project\\src\\users\\admin\\MenuItems-admin.js":"15","C:\\Users\\QURAT UL AIN NASIR\\Desktop\\pps-project\\src\\users\\student\\MenuItems-student.js":"16","C:\\Users\\QURAT UL AIN NASIR\\Desktop\\pps-project\\src\\users\\teacher\\MenuItems-teacher.js":"17","C:\\Users\\QURAT UL AIN NASIR\\Desktop\\pps-project\\src\\components\\UIElements\\CustomTooltip.js":"18","C:\\Users\\QURAT UL AIN NASIR\\Desktop\\pps-project\\src\\AddWordModal.js":"19","C:\\Users\\QURAT UL AIN NASIR\\Desktop\\pps-project\\src\\ScoreModal.js":"20"},{"size":500,"mtime":1608152171479,"results":"21","hashOfConfig":"22"},{"size":1589,"mtime":1608477248348,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":1608151629157,"results":"24","hashOfConfig":"22"},{"size":8624,"mtime":1608478088301,"results":"25","hashOfConfig":"22"},{"size":2252,"mtime":1608369329762,"results":"26","hashOfConfig":"22"},{"size":11420,"mtime":1608476943325,"results":"27","hashOfConfig":"22"},{"size":2685,"mtime":1608446199883,"results":"28","hashOfConfig":"22"},{"size":4969,"mtime":1608402148602,"results":"29","hashOfConfig":"22"},{"size":2816,"mtime":1608303459833,"results":"30","hashOfConfig":"22"},{"size":3593,"mtime":1608446168988,"results":"31","hashOfConfig":"22"},{"size":2143,"mtime":1608303617078,"results":"32","hashOfConfig":"22"},{"size":1638,"mtime":1608319568187,"results":"33","hashOfConfig":"22"},{"size":1400,"mtime":1608319529027,"results":"34","hashOfConfig":"22"},{"size":448,"mtime":1608316380011,"results":"35","hashOfConfig":"22"},{"size":468,"mtime":1608209265338,"results":"36","hashOfConfig":"22"},{"size":357,"mtime":1608146977000,"results":"37","hashOfConfig":"22"},{"size":137,"mtime":1608146977000,"results":"38","hashOfConfig":"22"},{"size":490,"mtime":1608146977000,"results":"39","hashOfConfig":"22"},{"size":1400,"mtime":1608320181923,"results":"40","hashOfConfig":"22"},{"size":1854,"mtime":1608476448174,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1o4gio0",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"44"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"44"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"44"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"44"},"C:\\Users\\QURAT UL AIN NASIR\\Desktop\\pps-project\\src\\index.js",[],["90","91"],"C:\\Users\\QURAT UL AIN NASIR\\Desktop\\pps-project\\src\\App.js",[],"C:\\Users\\QURAT UL AIN NASIR\\Desktop\\pps-project\\src\\reportWebVitals.js",[],"C:\\Users\\QURAT UL AIN NASIR\\Desktop\\pps-project\\src\\Auth.js",[],"C:\\Users\\QURAT UL AIN NASIR\\Desktop\\pps-project\\src\\users\\admin\\Admin.js",["92"],"//import { Button } from \"../Buttons/Buttons\";\r\nimport React, { Component } from \"react\";\r\n\r\nimport { MenuItems } from \"./MenuItems-admin\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport logo from \"../../assets/PPS5.jpeg\";\r\nimport \"./admin.css\";\r\n//import {image} from \"./images\";\r\n//import { TextField } from \"@material-ui/core\";\r\n\r\nconst Admin = () => {\r\n    return (\r\n      <React.Fragment>\r\n\r\n<nav className=\"NavbarItems-admin\">\r\n        \r\n<NavLink to=\"/admin\" >\r\n                  \r\n        <img className=\"logo-admin\" src={logo} alt=\"Logo\" />\r\n\r\n</NavLink>\r\n        <h1 className=\"navbar-logo-admin\">Admin's Portal</h1>\r\n\r\n        <ul className=\"nav-menu-admin \">\r\n          {MenuItems.map((item, index) => {\r\n            return (\r\n              <div className=\"nav-links-admin\" key={index}>\r\n                <li>\r\n                  <NavLink to={item.url} className={item.cName}>\r\n                    {\" \"}\r\n                    {item.title}\r\n                  </NavLink>\r\n                  {/* <a className={item.cName} href={item.url}>\r\n                      {item.title}\r\n                    </a> */}\r\n                </li>\r\n              </div>\r\n            );\r\n          })}\r\n        </ul>\r\n        <NavLink to=\"/#\" > <button className=\"button-admin\">Log out</button>\r\n        </NavLink> \r\n        \r\n      </nav>\r\n\r\n\r\n        {/* <nav className=\"NavbarItems\">\r\n          <img className=\"logo\" src={logo} alt=\"Logo\" />\r\n          <h1 className=\"navbar-logo\">Admin's Portal</h1> */}\r\n\r\n          {/* <div className=\"menu-icon\"></div> */}\r\n\r\n          {/* <ul className=\"nav-menu \">\r\n            {MenuItems.map((item, index) => {\r\n              return (\r\n                <div className=\"nav-links\" key={index}>\r\n                  <li>\r\n                    <NavLink to={item.url} className={item.cName}>\r\n                      {\" \"}\r\n                      {item.title}\r\n                    </NavLink>\r\n                  </li>\r\n                </div>\r\n              );\r\n            })}\r\n          </ul>\r\n          <NavLink to=\"/addword\" > <button className=\"button-admin\">Log out</button></NavLink>\r\n        </nav> */}\r\n        <div className=\"admin-body\"> Welcome Admin</div>\r\n      </React.Fragment>\r\n    );\r\n  \r\n}\r\nexport default Admin;\r\n","C:\\Users\\QURAT UL AIN NASIR\\Desktop\\pps-project\\src\\spellBee\\speechTotext\\SpeechToText.js",["93","94","95"],"import React, { useState, useEffect, useRef } from \"react\";\nimport { grade } from \"../MainPage\";\nimport { level } from \"../SpellLevel\";\nimport { TextField } from \"@material-ui/core\";\nimport { Clear, Check } from \"@material-ui/icons\";\nimport Tooltip from \"../../components/UIElements/CustomTooltip\";\nimport MicIcon from \"@material-ui/icons/Mic\";\nimport MicOffIcon from \"@material-ui/icons/MicOff\";\nimport speaker from \"../../assets/speaker.png\";\nimport useForm from \"../../../src/utils/useForm\";\nimport ScoreModal from \"../../ScoreModal\";\n\nimport { useSpeechSynthesis } from \"react-speech-kit\";\nimport \"./speechTotext.css\";\nimport { NavLink, useHistory } from \"react-router-dom\";\nimport logo from \"../../assets/PPS5.jpeg\";\n\nexport let Scores;\nexport let attempted;\n\n\nconst speechRecognition =\n  window.speechRecognition || window.webkitSpeechRecognition;\nconst mic = new speechRecognition();\nmic.continuous = true;\nmic.interimResults = true;\nmic.lang = \"en-US\";\nconst SpeechToText = () => {\n  const [inputValue, handleChangeForInputs, clear] = useForm();\n  const [isListening, setisListening] = useState(false);\n  const [check, setCheck] = useState(false);\n  const [hintVisibility, sethintVisiility] = useState(false);\n\n  const [open, setOpen] = useState(() => false);\n  // const [modalShow, setModalShow] = useState(() => true);\n\n  const [visibility, setVisibility] = useState(false);\n  const [word, setWord] = useState(\"\");\n  // const [score, setScore] = useState(0);\n  const [count, setCount] = useState(0);\n  const { speak } = useSpeechSynthesis();\n\n  let wordTocompare = useRef(\"\");\n  let wordDescription = useRef(\"\");\n  let marks = useRef(0);\n  let attemptedMarks = useRef(0);\n  useEffect(() => {\n    \n    nextBtnHandler();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [count]);\n\n  useEffect(() => {\n    handleListen();\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isListening]);\n\n  const handleListen = async () => {\n    if (isListening) {\n      mic.start();\n      // mic.onend = () => {\n      //   console.log(\"continue........\");\n      //   mic.start();\n      // };\n    } else {\n      mic.stop();\n\n      mic.onend = () => {\n        console.log(\"finished\");\n      };\n\n      mic.onstart = () => {\n        console.log(\"mic is on\");\n      };\n      mic.onresult = (event) => {\n        console.log(Array.from(event.results));\n        const transcript = Array.from(event.results)\n          .map((result) => result[0])\n          .map((result) => result.transcript)\n          .join(\" \");\n        console.log(typeof transcript);\n        let arrayOfTranscript = transcript.split(\"\");\n        console.log(arrayOfTranscript);\n\n        const letters = arrayOfTranscript.filter((letter) => letter !== \" \");\n        const finalWord = letters.join(\"\");\n        console.log(\"from join \" + letters.join(\"\"));\n\n        setWord(finalWord.toLowerCase());\n        console.log(\"word \" + word);\n      };\n      mic.onerror = (event) => {\n        console.log(event.error);\n      };\n    }\n\n    if (word !== null && !isListening) {\n      try {\n        const response = await fetch(\"http://localhost:5000/spell\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            spell: word,\n          }),\n        });\n\n        const responseData = await response.json();\n        if (responseData) {\n          console.log(responseData.spell + \" im from response of handleListen\");\n          if (word === responseData.spell) {\n            console.log(\"both words are equl........\");\n            marks.current = marks.current + 1;\n            Scores = marks.current;\n            attemptedMarks.current = count;\n            attempted = attemptedMarks.current;\n            setCheck(() => true);\n            setVisibility(() => true);\n          } else {\n            marks.current = marks.current;\n            Scores = marks.current;\n            attemptedMarks.current = count;\n            attempted = attemptedMarks.current;\n            setCheck(() => false);\n            setVisibility(() => false);\n          }\n        }\n        if (responseData.err) {\n          console.log(responseData.err);\n        }\n        // console.log(responseData);\n      } catch (err) {\n        console.log(err);\n      }\n      //for last word\n      if (count === 3) {\n        console.log(count + \" im from count\");\n        setOpen(() => true);\n      }\n    }\n  };\n\n  const clickHandler = async (e) => {\n    e.preventDefault();\n    try {\n      const response = await fetch(\"http://localhost:5000/spell\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          spell: inputValue.spell,\n        }),\n      });\n\n      const responseData = await response.json();\n      if (responseData) {\n        console.log(\"pokfkioerj \" + responseData.spell);\n        console.log(\"word to compare \" + wordTocompare.current);\n        if (wordTocompare.current === responseData.spell) {\n          console.log(\"both words are equl\");\n          marks.current = marks.current + 1;\n          Scores = marks.current;\n          attemptedMarks.current = count;\n          attempted = attemptedMarks.current;\n          setCheck(() => true);\n          setVisibility(() => true);\n        } else {\n          marks.current = marks.current;\n          Scores = marks.current;\n          attemptedMarks.current = count;\n          attempted = attemptedMarks.current;\n          setCheck(() => false);\n          setVisibility(() => true);\n        }\n      }\n      // console.log(responseData);\n    } catch (err) {\n      console.log(err);\n    }\n    //for last word\n    if (count === 3) {\n      console.log(count + \" im from count\");\n      setOpen(() => true);\n    }\n  };\n\n  const speakHandler = async () => {\n    clear();\n    setWord(() => null);\n    setVisibility(() => false);\n    console.log(count);\n    sethintVisiility(() => false);\n    try {\n      const response = await fetch(\n        `http://localhost:5000/word?grade=${grade}&level=${level}`\n      );\n      const responseData = await response.json();\n      wordTocompare.current = responseData.text[count];\n      wordDescription.current = responseData.description[count];\n      speak({ text: responseData.text[count] });\n\n      console.log(wordTocompare.current + \".................\");\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const nextBtnHandler = async () => {\n    clear();\n    // console.log(\"from next btn\" + count);\n    setWord(() => null);\n    // setCheck(() => false);\n    setVisibility(() => false);\n    sethintVisiility(() => false);\n    try {\n      const response = await fetch(\n        `http://localhost:5000/word?grade=${grade}&level=${level}`\n      );\n      const responseData = await response.json();\n      wordTocompare.current = responseData.text[count];\n      speak({ text: responseData.text[count] });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  console.log(inputValue.spell);\n\n  return (\n    <React.Fragment>\n      <nav className=\"NavbarItems-speech\">\n        <NavLink to=\"/Student\">\n          <img className=\"logo-speech\" src={logo} alt=\"Logo\" />\n        </NavLink>\n        <h1 className=\"navbar-logo-speech\">Spell Bee</h1>\n        <ul className=\"nav-menu-speech \">\n          <div className=\"nav-links-speech\">\n            <li>\n              <NavLink to=\"/Student\" className=\"nav-links\">\n                Home\n              </NavLink>\n            </li>\n          </div>\n\n          <div className=\"nav-links-speech\">\n            <li>\n              <NavLink to=\"/Student/SpellBee\" className=\"nav-links\">\n                Grades\n              </NavLink>\n            </li>\n          </div>\n\n          {/* <div className=\"nav-links-speech\">\n            <li>\n              <NavLink to=\"/Student\" className=\"nav-links\">\n                Go Back To Portal\n              </NavLink>\n            </li>\n          </div> */}\n          {/* <div className=\"nav-links-Level\">\n            <li>\n              <NavLink to=\"Vocabulary\" className=\"nav-links-Level\">\n                Vocabulary\n              </NavLink>\n            </li>\n          </div> */}\n        </ul>\n      </nav>\n\n      <ScoreModal\n        openModal={open}\n        closeModal={() => setOpen(false)}\n      ></ScoreModal>\n      <div id=\"background\">\n        <div className=\"container\">\n          <div className=\"box\">\n            {/* <h2>{grade}</h2>\n          <h2>{level}</h2> */}\n            <div className=\"speaker\" onClick={speakHandler}>\n              <img src={speaker} alt=\"speaker\" />\n            </div>\n\n            <div\n              style={{\n                float: \"right\",\n                marginTop: \"2rem\",\n                display: !visibility && \"none\",\n              }}\n            >\n              {check ? (\n                <div>\n                  <Check style={{ color: \"green\" }} />\n                  {/* <p>{this.setScore({\n                          score: this.state.score + 2\n                          })}\n                          </p> */}\n                </div>\n              ) : (\n                <div>\n                  <Clear style={{ color: \"red\", position: \"fixed\" }} />\n                  <p className=\"correctWord\">{wordTocompare.current}</p>\n                  {/* <p className=\"correctWord\">{description.current}</p>  */}\n                </div>\n              )}\n            </div>\n            <form onSubmit={clickHandler}>\n              {isListening ? (\n                <TextField\n                  type=\"text\"\n                  name=\"spell\"\n                  label=\"switching\"\n                  value={word || \"\"}\n                />\n              ) : (\n                <Tooltip title=\"please enter spellings in the text field or use microphone to speak out the spellings \">\n                  <TextField\n                    type=\"text\"\n                    name=\"spell\"\n                    label=\"Enter Spellings\"\n                    value={inputValue.spell || \"\"}\n                    onChange={handleChangeForInputs}\n                  />\n                </Tooltip>\n              )}\n            </form>\n\n            <button className=\"submitBtn\" onClick={clickHandler}>\n              submit\n            </button>\n            <button\n              className=\"mic\"\n              onClick={() => setisListening((prevState) => !prevState)}\n            >\n              {!isListening ? <MicIcon /> : <MicOffIcon />}\n            </button>\n\n            <button\n              className=\"hintBtn\"\n              onClick={() => sethintVisiility(() => true)}\n            >\n              Hint\n            </button>\n            {hintVisibility && (\n              <p className=\"description\">{wordDescription.current}</p>\n            )}\n\n            <div>\n              <button\n                className=\"nextBtn\"\n                onClick={() => setCount((prevState) => prevState + 1)}\n              >\n                NEXT\n              </button>\n            </div>\n\n            <div>\n              <button className=\"exitBtn\" onClick={() => setOpen(() => true)}>\n                Exit\n              </button>\n              {/* {\" \"} */}\n\n              {/* <ScoreModal\n              modalisOpen={open}\n              // modalShow\n              closeModal={() => setOpen(false)}\n            ></ScoreModal> */}\n            </div>\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default SpeechToText;\n","C:\\Users\\QURAT UL AIN NASIR\\Desktop\\pps-project\\src\\spellBee\\SpellLevel.js",[],"C:\\Users\\QURAT UL AIN NASIR\\Desktop\\pps-project\\src\\users\\admin\\AddWordAdmin.js",["96","97","98"],"import React, { useState } from \"react\";\r\nimport useForm from \"../../../src/utils/useForm\";\r\nimport { MenuItems } from \"./MenuItems-admin\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport logo from \"../../assets/PPS5.jpeg\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport Modal from \"../../modal\";\r\nimport ErrorModal from \"../../ErrorModal\";\r\nimport \"./addWordAdmin.css\";\r\n\r\nconst AddWordAdmin = () => {\r\n  const [level, setLevel] = useState(() => \"\");\r\n  const [grade, setGrade] = useState(() => \"\");\r\n  const [error, setError] = useState(\"\"); //backend\r\n  const [open, setOpen] = useState(() => false);\r\n  const [errModal, seterrModal] = useState(() => false);\r\n  const [err, setErr] = useState(() => false);\r\n  const [modalShow, setModalShow] = useState(() => true);\r\n  const [inputValue, handleChangeForInputs, clear] = useForm();\r\n\r\n  const addHandler = async (e) => {\r\n    clear();\r\n    e.preventDefault();\r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/admin/addWord\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          spell: inputValue.adminWord,\r\n          description: inputValue.adminDescription,\r\n          grade: grade,\r\n          level: level,\r\n        }),\r\n      });\r\n\r\n      const responseData = await response.json();\r\n      if (responseData.result) {\r\n        console.log(responseData.result.spell);\r\n       \r\n        setErr(() => false);\r\n        setOpen(() => true);\r\n      }\r\n      if (responseData.err) {\r\n        console.log(responseData.err);\r\n        setErr(() => true);\r\n        seterrModal(() => true);\r\n        setOpen(() => false);\r\n      }\r\n      // console.log(responseData);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n\r\n    <nav className=\"NavbarItems-admin\">\r\n            \r\n    <NavLink to=\"/admin\" >\r\n                      \r\n            <img className=\"logo-admin\" src={logo} alt=\"Logo\" />\r\n    \r\n    </NavLink>\r\n            <h1 className=\"navbar-logo-admin\">Admin's Portal</h1>\r\n    \r\n            <ul className=\"nav-menu-admin \">\r\n              {MenuItems.map((item, index) => {\r\n                return (\r\n                  <div className=\"nav-links-admin\" key={index}>\r\n                    <li>\r\n                      <NavLink to={item.url} className={item.cName}>\r\n                        {\" \"}\r\n                        {item.title}\r\n                      </NavLink>\r\n                      {/* <a className={item.cName} href={item.url}>\r\n                          {item.title}\r\n                        </a> */}\r\n                    </li>\r\n                  </div>\r\n                );\r\n              })}\r\n            </ul>\r\n            <NavLink to=\"/#\" > <button className=\"button-admin\">Log out</button>\r\n            </NavLink> \r\n            \r\n          </nav>\r\n    \r\n    \r\n    <div id=\"addWordBackground\">\r\n      <div className=\"addWordcontainer\">\r\n        <div className=\"addWordBox\">\r\n          <form>\r\n            <TextField\r\n              type=\"text\"\r\n              name=\"adminWord\"\r\n              label=\"Enter word\"\r\n              value={inputValue.adminWord || \"\"}\r\n              onChange={handleChangeForInputs}\r\n            />\r\n            <br />\r\n            <TextField\r\n              type=\"text\"\r\n              name=\"adminDescription\"\r\n              label=\"Enter description\"\r\n              value={inputValue.adminDescription || \"\"}\r\n              onChange={handleChangeForInputs}\r\n            />\r\n            <div className=\"dropDown\">\r\n              <select id=\"Grade\" onChange={(e) => setGrade(e.target.value)}>\r\n                <option value=\"grade\">Select Grade</option>\r\n                <option value=\"Grade-1\">Grade-1</option>\r\n                <option value=\"Grade-2\">Grade-2</option>\r\n                <option value=\"Grade-4\">Grade-4</option>\r\n                <option value=\"Grade-5\">Grade-5</option>\r\n              </select>\r\n              <select id=\"Level\" onChange={(e) => setLevel(e.target.value)}>\r\n                <option value=\"level\">Select Level</option>\r\n                <option value=\"Beginner\">Beginner</option>\r\n                <option value=\"Intermediate\">Intermediate</option>\r\n                <option value=\"Advanced\">Advanced</option>\r\n              </select>\r\n            </div>\r\n          </form>\r\n          <button className=\"addBtn\" onClick={addHandler}>\r\n            ADD\r\n          </button>{\" \"}\r\n          {err ? (\r\n            <ErrorModal\r\n              modalShow\r\n              modalisOpen={errModal}\r\n              error={error}\r\n              closeModal={() => seterrModal(false)}\r\n            ></ErrorModal>\r\n          ) : (\r\n            <Modal\r\n              modalisOpen={open}\r\n              modalShow\r\n              closeModal={() => setOpen(false)}\r\n            ></Modal>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AddWordAdmin;","C:\\Users\\QURAT UL AIN NASIR\\Desktop\\pps-project\\src\\users\\student\\Student.js",[],"C:\\Users\\QURAT UL AIN NASIR\\Desktop\\pps-project\\src\\spellBee\\MainPage.js",[],"C:\\Users\\QURAT UL AIN NASIR\\Desktop\\pps-project\\src\\users\\teacher\\Teacher.js",["99"],"import React, { Component } from \"react\";\r\nimport { MenuItems } from \"./MenuItems-teacher\";\r\nimport { userName } from \"../../Auth\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport logo from \"../../assets/PPS5.jpeg\";\r\nimport \"./teacher.css\";\r\n//import \"./auth.css\";\r\n//import {image} from \"./images\";\r\n//import { TextField } from \"@material-ui/core\";\r\n\r\nconst Teacher = () => {\r\n    return (\r\n      <React.Fragment>\r\n        <nav className=\"NavbarItems-teacher\">\r\n        <NavLink to=\"/teacher\" >\r\n                  \r\n                  <img className=\"logo\" src={logo} alt=\"Logo\" />\r\n          \r\n          </NavLink>\r\n          <h1 className=\"navbar-logo-teacher\">{userName}</h1>\r\n\r\n          <ul className=\"nav-menu-teacher \">\r\n            {MenuItems.map((item, index) => {\r\n              return (\r\n                <div className=\"nav-links-teacher\" key={index}>\r\n                  <li>\r\n                    <NavLink to={item.url} className={item.cName}>\r\n                      {\" \"}\r\n                      {item.title}\r\n                    </NavLink>\r\n                  </li>\r\n                </div>\r\n              );\r\n            })}\r\n          </ul>\r\n          <NavLink to=\"/#\" > <button className=\"button-teacher\">Log out</button>\r\n        </NavLink> \r\n        </nav>\r\n\r\n        <div className=\"all-divs\">\r\n          <div className=\"body-div-teacher\">\r\n            <p className=\"text-teacher\">Lecture Notes </p>\r\n            <div className=\"button-div\">\r\n              <button className=\"button-teacher\">Go</button>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"body-div-teacher\">\r\n            <p className=\"text-teacher\">Video Lectures </p>\r\n            <div className=\"button-div\">\r\n              <button className=\"button-teacher\">Go</button>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"body-div-teacher\">\r\n            <p className=\"text-teacher\">Worksheets </p>\r\n            <div className=\"button-div\">\r\n              <button className=\"button-teacher\">Go</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\nexport default Teacher;\r\n","C:\\Users\\QURAT UL AIN NASIR\\Desktop\\pps-project\\src\\modal.js",["100"],"import React, { useState } from \"react\";\r\nimport Modal from \"react-modal\";\r\nimport \"./modal.css\";\r\nimport CheckCircleOutlineRoundedIcon from \"@material-ui/icons/CheckCircleOutlineRounded\";\r\nModal.setAppElement(\"#root\");\r\n\r\nconst ModalWin = (props) => {\r\n  const [modalisOpen, setModalisOPen] = useState(true);\r\n\r\n  return (\r\n    <div>\r\n      {\" \"}\r\n      <Modal\r\n        isOpen={props.modalisOpen}\r\n        onRequestClose={() => setModalisOPen(props.closeModal)}\r\n        style={{\r\n          overlay: {\r\n            background: \"0 0 15 rgba(0,0,0,0.2)\",\r\n          },\r\n          content: {\r\n            color: \"crimson\",\r\n            width: \"300px\",\r\n            height: \"300px\",\r\n            marginLeft: \"35rem\",\r\n            marginTop: \"8rem\",\r\n            textAlign: \"center\",\r\n            boxShadow: \"0 5px 8px #f5f5f5\",\r\n            fontWeight: \"bolder\",\r\n          },\r\n        }}\r\n      >\r\n        <div style={{ color: \"green\", fontSize: \"large\" }}>\r\n          <CheckCircleOutlineRoundedIcon\r\n            style={{ color: \"green\", fontSize: \"60px\" }}\r\n          />\r\n        </div>\r\n        {props.modalShow ? (\r\n          <h2 style={{ color: \"green\" }}>Word Added Successfully!</h2>\r\n        ) : (\r\n          <h2 style={{ color: \"green\" }}>SIGN-UP SUCCESSFUL!</h2>\r\n        )}\r\n        {!props.modalShow ? (\r\n          <p style={{ color: \"black\" }}>Please switch to LOGIN and continue </p>\r\n        ) : null}\r\n\r\n        <button\r\n          onClick={() => setModalisOPen(props.closeModal)}\r\n          className=\"closeButton\"\r\n        >\r\n          CLOSE\r\n        </button>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\nexport default ModalWin;","C:\\Users\\QURAT UL AIN NASIR\\Desktop\\pps-project\\src\\ErrorModal.js",["101"],"import React, { useState } from \"react\";\r\nimport Modal from \"react-modal\";\r\nimport \"./modal.css\";\r\nimport ErrorOutlineRoundedIcon from \"@material-ui/icons/ErrorOutlineRounded\";\r\nModal.setAppElement(\"#root\");\r\n\r\nconst ErrorModal = (props) => {\r\n  const [modalisOpen, setModalisOPen] = useState(true);\r\n\r\n  return (\r\n    <div>\r\n      {\" \"}\r\n      <Modal\r\n        isOpen={props.modalisOpen}\r\n        onRequestClose={() => setModalisOPen(props.closeModal)}\r\n        style={{\r\n          overlay: {\r\n            background: \"0 0 15 rgba(0,0,0,0.2)\",\r\n          },\r\n          content: {\r\n            width: \"300px\",\r\n            height: \"300px\",\r\n            marginLeft: \"35rem\",\r\n            marginTop: \"8rem\",\r\n            textAlign: \"center\",\r\n            boxShadow: \"0 5px 8px #f5f5f5\",\r\n            fontWeight: \"bolder\",\r\n          },\r\n        }}\r\n      >\r\n        <div style={{ color: \"red\", fontSize: \"large\" }}>\r\n          <ErrorOutlineRoundedIcon style={{ color: \"red\", fontSize: \"60px\" }} />\r\n        </div>\r\n        <h2>OOPS!</h2>\r\n        <h3 style={{ color: \"red\" }}>{props.error}</h3>\r\n        <p style={{ color: \"black\", marginTop: \"1rem\" }}>Please try again </p>\r\n        <button\r\n          onClick={() => setModalisOPen(props.closeModal)}\r\n          className=\"closeButton\"\r\n        >\r\n          Try Again\r\n        </button>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\nexport default ErrorModal;","C:\\Users\\QURAT UL AIN NASIR\\Desktop\\pps-project\\src\\utils\\useForm.js",[],"C:\\Users\\QURAT UL AIN NASIR\\Desktop\\pps-project\\src\\users\\admin\\MenuItems-admin.js",[],"C:\\Users\\QURAT UL AIN NASIR\\Desktop\\pps-project\\src\\users\\student\\MenuItems-student.js",[],"C:\\Users\\QURAT UL AIN NASIR\\Desktop\\pps-project\\src\\users\\teacher\\MenuItems-teacher.js",[],"C:\\Users\\QURAT UL AIN NASIR\\Desktop\\pps-project\\src\\components\\UIElements\\CustomTooltip.js",[],"C:\\Users\\QURAT UL AIN NASIR\\Desktop\\pps-project\\src\\AddWordModal.js",["102"],"C:\\Users\\QURAT UL AIN NASIR\\Desktop\\pps-project\\src\\ScoreModal.js",["103","104"],"import React, { useEffect, useState } from \"react\";\r\nimport Modal from \"react-modal\";\r\nimport { Scores } from \"./spellBee/speechTotext/SpeechToText\";\r\nimport { attempted } from \"./spellBee/speechTotext/SpeechToText\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport img from \"./assets/stars4.jpg\";\r\n// /src/assets/star4.jpeg\";\r\nimport \"./scoreModal.css\";\r\n\r\nModal.setAppElement(\"#root\");\r\n\r\nconst ScoreModal = (props) => {\r\n  const [modalisOpen, setModalisOPen] = useState(false);\r\n\r\n  return (\r\n    <div>\r\n      {\" \"}\r\n      <Modal\r\n        isOpen={props.openModal}\r\n        onRequestClose={() => setModalisOPen(props.closeModal)}\r\n        shouldCloseOnOverlayClick={false}\r\n        style={{\r\n          overlay: {\r\n            background: \"0 0 15 rgba(0,0,0,0.2)\",\r\n          },\r\n\r\n          content: {\r\n            color: \"#rgb(11, 11, 12)\",\r\n            width: \"350px\",\r\n            height: \"330px\",\r\n            marginLeft: \"30rem\",\r\n            backgroundImage: \"url(\" + img + \")\",\r\n            // backgroundImage: url(\"./assets/b12.jpg\")  ,\r\n            marginTop: \"8rem\",\r\n            paddingTop: \"10p\",\r\n            textAlign: \"center\",\r\n            // boxShadow: \"0 5px 8px #f5f5f5\",\r\n            fontWeight: \"bolder\",\r\n            boxShadow: \" 5px 5px 10px  rgb(64, 92, 250)\",\r\n          },\r\n        }}\r\n      >\r\n        <div>\r\n          <p className=\"scoreText-score\">Scores:</p>\r\n        </div>\r\n        <div>\r\n          <p className=\"score-score\">{Scores}</p>\r\n        </div>\r\n        <div>attempted words: {attempted + 1} </div>\r\n\r\n        \r\n        <NavLink to=\"/Student\">\r\n          <button\r\n            onClick={() => setModalisOPen(props.closeModal)}\r\n            className=\"closeButton-score\"\r\n          >\r\n            Close\r\n          </button>\r\n        </NavLink>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\nexport default ScoreModal;",{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","severity":1,"message":"110","line":2,"column":17,"nodeType":"111","messageId":"112","endLine":2,"endColumn":26},{"ruleId":"109","severity":1,"message":"113","line":15,"column":19,"nodeType":"111","messageId":"112","endLine":15,"endColumn":29},{"ruleId":"114","severity":1,"message":"115","line":122,"column":29,"nodeType":"116","messageId":"117","endLine":122,"endColumn":42},{"ruleId":"114","severity":1,"message":"115","line":171,"column":27,"nodeType":"116","messageId":"117","endLine":171,"endColumn":40},{"ruleId":"109","severity":1,"message":"118","line":14,"column":17,"nodeType":"111","messageId":"112","endLine":14,"endColumn":25},{"ruleId":"109","severity":1,"message":"119","line":18,"column":10,"nodeType":"111","messageId":"112","endLine":18,"endColumn":19},{"ruleId":"109","severity":1,"message":"120","line":18,"column":21,"nodeType":"111","messageId":"112","endLine":18,"endColumn":33},{"ruleId":"109","severity":1,"message":"110","line":1,"column":17,"nodeType":"111","messageId":"112","endLine":1,"endColumn":26},{"ruleId":"109","severity":1,"message":"121","line":8,"column":10,"nodeType":"111","messageId":"112","endLine":8,"endColumn":21},{"ruleId":"109","severity":1,"message":"121","line":8,"column":10,"nodeType":"111","messageId":"112","endLine":8,"endColumn":21},{"ruleId":"109","severity":1,"message":"121","line":8,"column":10,"nodeType":"111","messageId":"112","endLine":8,"endColumn":21},{"ruleId":"109","severity":1,"message":"122","line":1,"column":17,"nodeType":"111","messageId":"112","endLine":1,"endColumn":26},{"ruleId":"109","severity":1,"message":"121","line":13,"column":10,"nodeType":"111","messageId":"112","endLine":13,"endColumn":21},"no-native-reassign",["123"],"no-negated-in-lhs",["124"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'useHistory' is defined but never used.","no-self-assign","'marks.current' is assigned to itself.","MemberExpression","selfAssignment","'setError' is assigned a value but never used.","'modalShow' is assigned a value but never used.","'setModalShow' is assigned a value but never used.","'modalisOpen' is assigned a value but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation"]